@startuml Composite

interface Validator {
  +validate(): void
}

class ValidatorComposite {
  -validators: List<Validator>
  +addValidator(validator: Validator): void
  +validate(): void
}

class ValidationException {
  +ValidationException(message: String)
}

class StringValidator {
  -input: Object
  +StringValidator(input: Object)
  +validate(): void
}

class MinLengthValidator {
  -input: String
  -minLength: int
  +MinLengthValidator(input: String, minLength: int)
  +validate(): void
}

class MaxLengthValidator {
  -input: String
  -maxLength: int
  +MaxLengthValidator(input: String, maxLength: int)
  +validate(): void
}

class Main {
  +main(args: String[]): void
}

Validator <|.. ValidatorComposite
Validator <|-- StringValidator
Validator <|-- MinLengthValidator
Validator <|-- MaxLengthValidator

Main --> ValidatorComposite
Main --> ValidationException

@enduml
